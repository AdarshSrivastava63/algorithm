#include <iostream>
#include <stdlib.h>
using namespace std;
struct node
{
  int data;
  node *next;
};

node *head=NULL;
node *start=NULL;
node *temp=NULL;
node insert(node** fg,int d)
{
  node *ptr;
   struct node* new_node =(struct node*) malloc(sizeof(struct node));
  new_node->data=d;
  new_node->next=NULL;
  if(*fg==NULL)
  {
    *fg=new_node;
    new_node->next=NULL;
  }
  else
  {
    ptr=*fg;
    while(ptr->next!=NULL)
    {
      ptr=ptr->next;
    }
    ptr->next=new_node;
    new_node->next=NULL;
  }
}
node display(node *fg)
{
  node *p;
  p=fg;
  while(p!=NULL)
  {
    cout<<"->"<<p->data;
    p=p->next;
  }  
}
void del(node *m)
{
  node *z;
  z=m;
  m=z->next;
  free(z);
}
node* Merge(node *a, node*b)
{
  // This is a "method-only" submission. 
  // You only need to complete this method 
    node* result = NULL;
 
  /* Base cases */
  if (a == NULL) 
     return(b);
  else if (b==NULL) 
     return(a);
 
  /* Pick either a or b, and recur */
  if (a->data <= b->data) 
  {
     result = a;
     result->next = Merge(a->next, b);
  }
  else
  {
     result = b;
     result->next = Merge(a, b->next);
  }
  return(result);
}
int main()
{
  int N1,N2,i,l;
  cin>>N1>>N2;
  int a[N1],b[N2];
  for(i=0;i<N1;i++)
  {
    cin>>a[i];
    l=a[i];
    insert(&head,l);
  }
  cout<<"Class A : ";
  display(head);
  cout<<"\n";
  for(i=0;i<N2;i++)
  {
    cin>>b[i];
    l=b[i];
    insert(&start,l);
  }
  cout<<"Class B : ";
  display(start);
  cout<<"\n";
  temp=Merge(head,start);
  cout<<"Joint Class : ";
  display(temp);
  return 0;
}
